/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project.Entreprise;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.ImageIcon;

/**
 *
 * @author LAULAU
 */
public class LineCreation extends javax.swing.JFrame {
    //Définition des propriétés
    private String reason = "Supply the stocks";
    private String transaction = "Purchase";
    private Inventory inventor;
    private ImageIcon iconPhoto;

    /**
     * Creates new form DialogLine
     * @param inv
     */
    public LineCreation(Inventory inv) {
        initComponents();
        menuBox.setBackground(new Color(240,240,240,190));
        inventor = inv;
        // Afficher le type de produit, la référence 
        // et la quantité du produit en question dans le cadre du composant
        Border framework = BorderFactory.createTitledBorder
        ("Ref : " + inv.getReference() + ",   Product : " + 
                inv.getTypeMaterial() + ",    Remaining : " + 
                inv.getRemaining() + " KG,   SecurStock : " + 
                inv.getSecurityStockPt() + " KG");
        menuBox.setBorder(framework);
        setBounds(200,330,640,550);
        setVisible(true);
        
        //Afficher une image en fond de fenêtre en fonction du produit choisi auparavant
        switch(inv.getTypeMaterial()){
            case "Steel":
                iconPhoto = new ImageIcon ("C:\\Users\\LAULAU\\Documents\\"
                                + "NetBeansProjects\\Entreprise\\Photos\\Steel\\"
                                + "BackgroundSteelLineCreation2.png");
                backgroundPhoto.setIcon(iconPhoto);
                break;
            case "Wood":
                iconPhoto = new ImageIcon ("C:\\Users\\LAULAU\\Documents\\"
                                + "NetBeansProjects\\Entreprise\\Photos\\Wood\\"
                                + "BackgroundWoodLineCreation3.png");
                backgroundPhoto.setIcon(iconPhoto);
                break;
            case "Plastic":
                iconPhoto = new ImageIcon ("C:\\Users\\LAULAU\\Documents\\"
                                + "NetBeansProjects\\Entreprise\\Photos\\"
                                + "Plastic\\BackgroundPlasticLineCreation1.png");
                backgroundPhoto.setIcon(iconPhoto);
                break;
            case "Glass":
                iconPhoto = new ImageIcon ("C:\\Users\\LAULAU\\Documents\\"
                                + "NetBeansProjects\\Entreprise\\Photos\\Glass\\"
                                + "BackgroundGlassLineCreation2.png");
                backgroundPhoto.setIcon(iconPhoto);
                break;
            default:
                
        }
    }
    
    
    
    public String formatDate(Date date) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yy");
        return dateFormat.format(date); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBox = new javax.swing.JPanel();
        quantityLabel = new javax.swing.JLabel();
        transactionLabel = new javax.swing.JLabel();
        enteredQuantity = new javax.swing.JTextField();
        transactionChoice = new javax.swing.JComboBox<>();
        productLabel = new javax.swing.JLabel();
        addBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        reasonLabel = new javax.swing.JLabel();
        reasonChoice = new javax.swing.JComboBox<>();
        backgroundPhoto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Line creation of reference");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        getContentPane().setLayout(null);

        menuBox.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), null), "Steel ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        menuBox.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        quantityLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        quantityLabel.setText("Quantity");

        transactionLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        transactionLabel.setText("Transaction");

        enteredQuantity.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        enteredQuantity.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        enteredQuantity.setText("0");
        enteredQuantity.setToolTipText("be added or removed from the Stock");

        transactionChoice.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        transactionChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choice Transaction", "Purchase", "Borrowing", "Selling", "Production" }));
        transactionChoice.setToolTipText("Choose the Transaction to be done");
        transactionChoice.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));
        transactionChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionChoiceActionPerformed(evt);
            }
        });

        productLabel.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        productLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productLabel.setText("Kg");

        addBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        addBtn.setText("Add");
        addBtn.setToolTipText("Click here to Add the Quantity in the Stock for the Reference");
        addBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204)));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        returnBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        returnBtn.setText("Return");
        returnBtn.setToolTipText("Click here to return to the previous page");
        returnBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204)));
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        removeBtn.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        removeBtn.setText("Remove");
        removeBtn.setToolTipText("Click here to Remove the Quantity in the Stock for the Reference");
        removeBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204)));
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        reasonLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        reasonLabel.setText("Reason");

        reasonChoice.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        reasonChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choice Reason", "Supply the stocks", "Stocks Pool", "Stocks of Decoupling", "Big Order", "Space-saving", "Out of stock", "Date Exceeded" }));
        reasonChoice.setToolTipText("Choice a Reason of the Transaction ");
        reasonChoice.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153)));
        reasonChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reasonChoiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuBoxLayout = new javax.swing.GroupLayout(menuBox);
        menuBox.setLayout(menuBoxLayout);
        menuBoxLayout.setHorizontalGroup(
            menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBoxLayout.createSequentialGroup()
                .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(menuBoxLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(transactionLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(reasonLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quantityLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(menuBoxLayout.createSequentialGroup()
                                .addComponent(enteredQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(productLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(3, 3, 3))
                            .addComponent(reasonChoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transactionChoice, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(menuBoxLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        menuBoxLayout.setVerticalGroup(
            menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enteredQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quantityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reasonChoice, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(reasonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transactionChoice)
                    .addComponent(transactionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(menuBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );

        getContentPane().add(menuBox);
        menuBox.setBounds(80, 220, 470, 270);

        backgroundPhoto.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(backgroundPhoto);
        backgroundPhoto.setBounds(-250, 0, 910, 640);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        // Ferme la fenêtre sans fermer l'application
        this.dispose();
    }//GEN-LAST:event_returnBtnActionPerformed
    
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String datestr = sdf.format(new Date());
        
        
        // Récupérer la quantité de la transaction
        // La quantité est positive pour un ajout en stock
        double quantity = Double.parseDouble(enteredQuantity.getText());
        {
        // Si le reste est supérieur au Stock de Sécurité alors aucun message    
        if (inventor.getRemaining() > inventor.getSecurityStockPt());
        // Si le reste est supérieur "ou" égal à 0 "ET" Si le reste est inférieur 
        // ou égal au Stock de Sécurité alors deux choix s'imposent
        else if ((inventor.getRemaining()>= 0)
                &&(inventor.getRemaining() <= inventor.getSecurityStockPt()))
            // Soit le reste est égale à "0" 
            // et la quantité ajoutée est inférieure à la valeure du Stock de Sécurité
            if((inventor.getRemaining() == 0) 
              && (quantity <= inventor.getSecurityStockPt()))
                new Message("The Reference : ", inventor.getReference(),
                    "WARNING ! You have reached or exceeded the Security Stock Point ! ",
                    "Remember to put back in Stock !!!");
            // Sinon soit le reste est inférieur au Stock de Sécurité 
            // et la quantité ajoutée est inférieure à la valeure du 
            // Stock de Sécurité imputée de la valeure du reste
            else if ((inventor.getRemaining() < inventor.getSecurityStockPt()) 
                    && (quantity <= (inventor.getSecurityStockPt() - inventor.getRemaining())))
                    new Message("The Reference : ", inventor.getReference(),
                        "WARNING ! You have reached or exceeded the Security Stock Point !",
                        " Remember to put back in Stock !!!");
        
        
        // Créer un objet de type LogistcsLine
        LogisticsLine logLine = new LogisticsLine(reason, transaction, datestr, quantity);
        // Modifier la propriété logLine de l'inventory en cours de traitement
        inventor.setLogLine(logLine);
        // Enregistrement de la référence dans un fichier objet, 
        // dont le nom porte le numéro de la référence suivi de l'extension ".dat"
        MaterialsFile mf = new MaterialsFile();
        mf.open("Product" + inventor.getReference() + ".dat", "W");
        mf.write(inventor);
        mf.close();
        }
        // Fermer la fenêtre en cours sans quitter l'application
        this.dispose();
    }//GEN-LAST:event_addBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        String datestr = sdf.format(new Date());
        // Récupérer la quantité de la transaction
        // La quantité devient négative pour une prise dans les stocks ("remove")
        double quantity = - Double.parseDouble(enteredQuantity.getText());
        if (-quantity <= (inventor.getRemaining())){
            // Si le reste en stock est égal à 0    
            if (-quantity == (inventor.getRemaining()))
                new Message("The Reference's remaining : ",inventor.getReference(), 
                    "WARNING !!! You are out of stock !!!","");
            else if ((inventor.getRemaining()<=inventor.getSecurityStockPt())
                    &&(-quantity <= (inventor.getSecurityStockPt())))
                new Message("The Reference : ",inventor.getReference(),
                    "WARNING You have reached or exceeded the Security Stock Point ! ",
                    "Remember to put back in Stock !!!");
                // Si le reste en stock est inférieur 
                // ou égal au Point de Stock de Sécurité     
            else if (-quantity >= ((inventor.getRemaining())-(inventor.getSecurityStockPt())))
                new Message("The Reference : ",inventor.getReference(),
                   "WARNING You have reached or exceeded the Security Stock Point ! ",
                   "Remember to put back in Stock !!!");
                
        
        // Créer un objet de type LogisticsLine
        LogisticsLine logLine = new LogisticsLine(reason, transaction, datestr, quantity);
        // Modifier la propriété logLine de "inventor" en cours de traitement
        inventor.setLogLine(logLine);
        
            // Enregistrement de la référence dans un fichier objet, 
            // dont le nom porte le numéro de la référence suivi de l'extension ".dat"
            MaterialsFile mf = new MaterialsFile();
            mf.open("Product" + inventor.getReference() + ".dat", "W");
            mf.write(inventor);
            mf.close();
        }
        // Si le reste en stock est inférieur à 0 (ce qui n'est pas possible dans un stock)
        else new Message("The Reference's remaining : ",inventor.getReference(), 
                "Cannot be exceeded 0 !!!", "You are out of stock !!!");
        
        // Fermer la fenêtre en cours sans quitter l'application
        this.dispose();
    }//GEN-LAST:event_removeBtnActionPerformed

    private void reasonChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reasonChoiceActionPerformed
        // Raison de la transaction
        reason = (String)reasonChoice.getSelectedItem();
    }//GEN-LAST:event_reasonChoiceActionPerformed

    private void transactionChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionChoiceActionPerformed
        // Transaction elle-même
        transaction = (String)transactionChoice.getSelectedItem();
    }//GEN-LAST:event_transactionChoiceActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel backgroundPhoto;
    private javax.swing.JTextField enteredQuantity;
    private javax.swing.JPanel menuBox;
    private javax.swing.JLabel productLabel;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JComboBox<String> reasonChoice;
    private javax.swing.JLabel reasonLabel;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton returnBtn;
    private javax.swing.JComboBox<String> transactionChoice;
    private javax.swing.JLabel transactionLabel;
    // End of variables declaration//GEN-END:variables
    
}
